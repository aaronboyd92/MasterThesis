buildscript {
    configurations.all {
        resolutionStrategy.force 'net.java.dev.javacc:javacc:6.1.2'
    }
}

plugins {
    id "ca.coglinc.javacc" version "2.3.1"
}
plugins {
    id "org.sonarqube" version "1.2"
}
apply plugin: 'java'
apply plugin: 'findbugs'


group 'fr.uga'
version '3.1.0'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

compileJavacc {
    arguments = [debug_parser: 'false']
    inputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
    outputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
}


jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': version,
                'Gradle-Version':'Gradle 2.10',
                'Built-By': 'Damien Pellier',
                'Premain-Class': 'fr.uga.pddl4j.util.MemoryAgent',
                'Main-Class': 'fr.uga.pddl4j.planners.hsp.HSP'
    }
    doFirst {
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

task run (type: JavaExec, dependsOn: build){
    if (project.hasProperty("Args")) {
        println("arguments list : " + Args)
        args(Args.split(','))
    }

    jvmArgs = ["-javaagent:"+project.buildDir.name+"/libs/"+project.name+"-"+project.version+".jar", "-server", "-Xms2048m", "-Xmx2048m"]

    description = "Run HSP plannin algorithm"
    main = "fr.uga.pddl4j.planners.hsp.HSP"
    classpath = sourceSets.main.runtimeClasspath
}

task cleanGenerated(type:Delete) {
    delete fileTree(dir: "src/main/java/fr/uga/pddl4j/parser/lexer", exclude:"Lexer.jj")
}

clean.doLast() {
    cleanGenerated.execute()
}

findbugsMain.onlyIf() { project.hasProperty('findbug') }
findbugsTest.onlyIf() { project.hasProperty('findbug') }

findbugsMain.doLast() {
    println("Find bug process completed without finding an issue")
}

findbugs {
    effort= "max"
    reportLevel = "low"
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

javadoc.doFirst() {
    excludeLexer(javadoc)
    failOnError false
}


