/*
 * Copyright (c) 2010 by Damien Pellier <Damien.Pellier@imag.fr>.
 *
 * This file is part of PDDL4J library.
 *
 * PDDL4J is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PDDL4J is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PDDL4J.  If not, see <http://www.gnu.org/licenses/>
 */
package fr.uga.pddl4j.heuristics.relaxation;
import fr.uga.pddl4j.encoding.CodedProblem;
import fr.uga.pddl4j.util.BitExp;
import fr.uga.pddl4j.util.BitOp;
import fr.uga.pddl4j.util.BitState;
import fr.uga.pddl4j.util.BitVector;
import java.util.ArrayList;
import java.util.List;
/**
 * This class will display the critical path based on the Delta Algorithm from the Automated Planning book. Automated Planning: Theory & Practice
 * Book by Dana S. Nau, Malik Ghallab, and Paolo Traverso (Chapter 9). 
 * @author Aaron Boyd
 * @version 1.0 20.08.2010
 */
public final class CriticalPath extends RelaxedGraphHeuristic {
 private BitExp[] precond;
 private BitExp[] effect;
 private BitExp[] neffect;
 private int [] pGoal;
 private int [] nGoal;
 private final int k = 2;
 private int goalCard;
 private int critical = Integer.MIN_VALUE;
 private final SetLevel delta;
 public CriticalPath(CodedProblem problem) {
  super(problem);
  this.delta = new SetLevel(problem);
  super.setAdmissible(false);
 }

 @Override
 public int estimate(BitState state, BitExp goal) throws NullPointerException {
  super.setGoal(goal);
  this.goalCard = this.delta.estimate(state, goal);
  final List<BitOp> operator = this.getOperators();
  int startPoint = 1;
  for (BitOp op : operator) {
            startPoint += op.getCondEffects().size();
        }
  int nb_relevant_facts = super.getRevelantFacts().size();
  this.pGoal = new int[nb_relevant_facts];
  this.nGoal = new int[nb_relevant_facts];
  this.precond = new BitExp[startPoint];
  this.effect = new BitExp[startPoint];
  this.neffect = new BitExp[startPoint];
  BitVector p_goal = super.getGoal().getPositive();
  BitVector n_goal = super.getGoal().getNegative();

                
        
        if (goalCard <= k){
         for (int p = p_goal.nextSetBit(0); p >= 0; p = p_goal.nextSetBit(p + 1)) {
             final int gl = this.pGoal[p];
            if (gl > goalCard) {
                critical = gl; 
                goalCard++;
            }
        }
 
        for(int p = n_goal.nextSetBit(0); p >= 0; p = n_goal.nextSetBit(p + 1)) {
            final int gl = this.nGoal[p];
            if (gl > goalCard) {
                critical = gl;
                goalCard++;
            }
        }
            for(BitOp op : this.getOperators()){
           BitExp effects = op.getCondEffects().get(0).getEffects();
        BitVector positiveEffect = effects.getPositive();
        BitVector negativeEffect = effects.getNegative();
                for (int p = negativeEffect.nextSetBit(0); p >= 0; p = negativeEffect.nextSetBit(p + 1)) {
                 this.neffect[p].getNegative();
                }
                for (int p = positiveEffect.nextSetBit(0); p >= 0; p = positiveEffect.nextSetBit(p + 1)) {
                    this.effect[p].getPositive();
                }
            final BitVector new_ops = new BitVector();
            final BitVector p_new_props = new BitVector();
            final BitVector n_new_props = new BitVector();
            for (int o = new_ops.nextSetBit(0); o >= 0; o = new_ops.nextSetBit(o + 1)) {
                p_new_props.or(this.effect[o].getPositive());
                
                n_new_props.or(this.effect[o].getNegative());

                final BitVector p_pre = this.precond[o].getPositive();
                for (int n = p_pre.nextSetBit(0);  n>= 0; n = p_pre.nextSetBit(n + 1)) {
                }
                final BitVector n_pre = this.precond[o].getNegative();
                for (int p = n_pre.nextSetBit(0); p >= 0; p = n_pre.nextSetBit(p + 1)) {
                }
            }
            if(this.effect.length !=0 && this.neffect.length ==0){ 
                positiveEffect.or(new_ops);
                p_goal.andNot(positiveEffect);
            }  
        
            }
        
        
        }else{
        //place the cardinality of the goal in to an array
        int [] combinations = new int [goalCard];
        int m = combinations.length;
        //Generate all subsets from the array
        int list = (1 << m);
        for(int i = 0; i<list; i++){
            List<Integer> sub = new ArrayList<>();
            for(int j=0; j<m; j++){
            if((i &(1<<j)) >0)
                sub.add(j);
        }
        //if the subset size equals k, print subset
        if(sub.size() >= k) {
        System.out.println(sub.size());
        
        }
      }
   }
       
     return super.isGoalReachable() ? critical : Integer.MAX_VALUE; 
 }
    
}
                       
